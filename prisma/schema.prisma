// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

// Projects created by users; each project links to a GitHub repository
model Project {
    id            String   @id @default(cuid())
    name          String
    repoUrl       String
    repoOwner     String
    repoName      String
    githubToken   String?  // optional, encrypted at rest by your platform
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    owner         User     @relation(fields: [ownerId], references: [id])
    ownerId       String
    commits       Commit[]
    answers       Answer[]

    @@index([repoOwner, repoName])
}

model Commit {
    id         String   @id @default(cuid())
    sha        String   @unique
    message    String
    author     String?
    timestamp  DateTime?
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId  String
    createdAt  DateTime @default(now())
}

model Answer {
    id         String   @id @default(cuid())
    question   String
    answer     String   @db.Text
    citations  String?  @db.Text // JSON array of {path, lines}
    project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId  String
    createdBy  User?    @relation(fields: [createdById], references: [id])
    createdById String?
    createdAt  DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
